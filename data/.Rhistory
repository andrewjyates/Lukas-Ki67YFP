coord_cartesian(xlim=c(7,65))
flow_frac_plot_lp <- ggplot(flow_frac_table, aes(x=time))+
geom_point(data=flow_frac_table %>% filter(!is.na(lp_data)) %>%droplevels(), aes(y = lp_data, size = age_class), alpha=0.3) +
labs(size="Age at start (d)") +
#geom_point(data=simple_abs_table %>% filter(!is.na(data)) %>%droplevels(), aes(y = data, shape = age_class))+
geom_line(aes(y = lp_model), linewidth = 1)+
labs(color = "",x = "Time since end of tamoxifen treatment (days)", y=bquote(bold('Fraction Ki67')^bold('+')~bold('of YFP')^bold('+'))) +
facet_wrap(~receptor)+
theme_bw()+
theme(axis.text=element_text(size=larger.font.size),
axis.title.x=element_text(size=larger.font.size, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y=element_text(size=larger.font.size,face="bold"),
plot.title = element_text(hjust = 0.5),
text = element_text(family = "Helvetica", size = larger.font.size),
legend.position ="none",
legend.title=element_text(size=smaller.font.size),
legend.text = element_text(size=smaller.font.size),
legend.key = element_rect(fill = "transparent"),
strip.background = element_rect(color = "black", fill = "#FBFCFC"),
strip.text = element_text(face = "bold", size=larger.font.size))+
scale_x_log10(limits=c(7,75), breaks=major.ticks.actual.times, minor_breaks = mb, labels=major.ticks.time.post.tx)+
scale_y_log10(labels = ggplot_scientific_notation_axes_labels)+
coord_cartesian(xlim=c(7,65))
z= plot_grid(flow_frac_plot_N,NULL, flow_frac_plot_lp,ncol=1, align="hv", labels = c('A', '', 'B'), label_size = panel.label.size, axis = "lr", rel_heights = c(1, 0.1, 1))#,shared_legend = TRUE, rel_heights = c(1, 1,0.1))
pdf("../figures/fig_6.pdf", width=plotwidth, height=plotwidth)
print(z)
dev.off()
pdf("../../Manuscript/PaperFigures/Figure-6.pdf", width=plotwidth, height=plotwidth)
print(z)
dev.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
packages <- c("tidyverse", "ggplot2")
tmp=lapply(packages, require, character.only = TRUE)
nboots=100
source("grind.R")
#load("simple_model_together.RData")
load(file =  "../data/DataObjects/CD4_CD8.RData")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(ggplot2)
library(gridExtra)#for arranging plots in a grid
library(stringr) #to split column containing location and celltype into 2 different ones
library(purrr)
renameTime <- function(x){
rename(x, time = names(x)[[2]])}
names_of_datasets <- c("cell-numbers-all","cell-numbers-YFPpos", "perc Ki67 - all cells", "perc Ki67 - YFPneg cells", "perc Ki67 - YFPpos cells", "perc Ki67 - YFPpos-neg ratio", "perc YFP - precursor product ratios", "perc YFP")
badlines = c(12,13,14,15,16,17,20,21,24,25,47,49,52,55,58,61) # either no TAM, or flu infected, or missing data
saving_data_function <- function(data){
x=read.delim(file = paste0("Raw Data - Thea/", data,".txt"))
x[-badlines,]
}
all_data <- sapply(names_of_datasets,saving_data_function,simplify=FALSE) # using sapply instead of map or lapply to keep names and not rename separately
all_data <- map(all_data,renameTime) #renaming time column to "time"
nmice=nrow(all_data[["cell-numbers-all"]])  # should be 45 out of the orig 61
# assign ID to each mouse
all_data <- map(all_data, ~mutate(.,ID = 1:nmice))
# get mouse demographic info, removing ctrl mice
demog=read.csv(file = "Raw Data - Thea/MouseAges-Start-End.csv")
demog=demog[-badlines,]
if(nrow(demog)!=nmice) stop("Mouse number weirdness!")
# add ID to the Demographic dataset too
demog$ID = 1:nmice
# define 4 age classes for mice based on age at start of treatment (ordered factors)
demog$age_class=cut(demog$age_at_start, c(0, 60,80, 100, 1000), labels=c("<60", "60-80", "81-100", ">100"))
# save this for reference
write_rds(demog, file="DataObjects/Mouse_ID_AgeClass.Rds")
ID_mouseID <- map(all_data, ~data.frame(.$ID, .$Mouse))
save(ID_mouseID, file = "DataObjects/ID_mouseID.Rdata")
all_data_celltype <- map(all_data, ~ pivot_longer(.,names_to = "type",cols = 3:(ncol(.)-1), values_to = "cell_number")) #storing sample information on one long column
all_data_tissue_celltype <- map(all_data_celltype, ~ data.frame(.$Mouse,.$time,str_split_fixed(.$type, "\\.", 2), .$cell_number, .$ID))
renaming2 <- function(x){
{names(x) = c("mouse", "time", "tissue","celltype","cell_number", "ID");x}
}
all_data_tissue_celltype <- map(all_data_tissue_celltype, ~renaming2(.))
#tissue, celltype is factor, cell_number, time numeric
change_data_type <- function(data){
{data$tissue = as.factor(data$tissue)
data$celltype = as.factor(data$celltype)
#data$cell_number = as.integer(data$cell_number)
data$cell_number = as.double(data$cell_number)
data$time = as.integer(data$time)
data$mouse = as.factor(data$mouse)
;data}
}
all_data_tissue_celltype <- all_data_tissue_celltype %>% map(change_data_type)
grouping <- function(x){
x %>% group_by(tissue) %>% group_split(.keep = T)
} #works great except for losing the tissue names
all_data_grouped <- map(all_data_tissue_celltype, grouping)
#all_data_grouped <- map(all_data_grouped, ~names(.) = c("LN", "SP", "TH"))
for(i in 1:5){
names(all_data_grouped[[i]]) <- c("LN", "SP", "TH")
}
names(all_data_grouped[[6]]) <- c("LN", "SP")
for(i in 7:8){
names(all_data_grouped[[i]]) <- c("LN", "SP", "TH", "other")}
splitting_celltype <- function(x){
map(c("CD4" = "4","CD8"="8","other" = "other"),function(y) filter(x,grepl(y, x$celltype) ))}
data_tissue_celltype  <- map_depth(all_data_grouped, 2, ~splitting_celltype(.) )
CD4_CD8 <- map(c("CD4" = "CD4", "CD8" = "CD8"), function(x) map_depth(data_tissue_celltype,2, function(y) y[[x]]))
#There are missing values which I will here remove, this is not the prettiest way so correct when you find a better solution:
CD4_CD8 <- map_depth(CD4_CD8, 2, function(x) map(c("LN" = "LN","SP" = "SP","TH" = "TH"), function(y) x[[y]]))
#This gave a zero list
for (i in c("CD4", "CD8")){
CD4_CD8[[i]][["perc Ki67 - YFPpos-neg ratio"]] <- list("LN" = CD4_CD8[[i]][["perc Ki67 - YFPpos-neg ratio"]][["LN"]], "SP" = CD4_CD8[[i]][["perc Ki67 - YFPpos-neg ratio"]][["SP"]])
}
save(CD4_CD8, file =  "DataObjects/CD4_CD8.RData")
tmp <- map_df(all_data_tissue_celltype, ~as.data.frame(.x), .id="data_type")
grouping <- function(x){
x %>% group_by(ID) %>% group_split(.keep = T)
}
tmp <- grouping(tmp)
names(tmp) <- 1:nmice
grouping <- function(x){
x %>% group_by(ID) %>% group_split(.keep = T)
}
tmp <- map(tmp, function(x) x%>%
filter(!tissue=="X") %>%
group_by(tissue) %>%
group_split(.keep = T))
tmp <- map(tmp, ~{names(.) = c(unique(.[[1]]$tissue), unique(.[[2]]$tissue), unique(.[[3]]$tissue));.})
tmp <- map_depth(tmp,2, function(x) x %>% group_by(data_type) %>% group_split(.keep=T))
names_tmp <- map_depth(tmp, 3, ~unique(.[["data_type"]]))
for (i in 1:nmice){
for(j in c("LN", "SP", "TH")){
{names(tmp[[i]][[j]]) = names_tmp[[i]][[j]]; tmp[[i]][[j]]}
}
}
#Filtering for naives
naives_per_mouse <- map_depth(tmp, 3, ~filter(., grepl("nai", celltype))) %>%
map_depth( 3, ~filter(., !grepl("Treg", celltype)))
split_CD4CD8 <- function(x){
x %>% group_by(celltype) %>% group_split(.keep = T)
}
#appending periphery option
tmp_periphery <- map(naives_per_mouse, ~append(., list(
list(data.frame("cell_number_LN" = .[["LN"]][["cell-numbers-all"]][["cell_number"]], "time" = .[["LN"]][["cell-numbers-all"]][["time"]], "celltype" = . [["LN"]][["cell-numbers-all"]][["celltype"]],"cell_number_SP" = .[["SP"]][["cell-numbers-all"]][["cell_number"]]))
)))
tmp_periphery <- map(tmp_periphery, ~{names(.) = c("LN","SP","TH","periphery");.})
if(nmice != length(tmp_periphery)) stop("something wrong with number of mice")
for(i in 1:nmice){
tmp_periphery[[i]][[4]] <- append(tmp_periphery[[i]][[4]], list(data.frame("cell_number_LN" = tmp_periphery[[i]][["LN"]][["cell-numbers-YFPpos"]][["cell_number"]], "time" = tmp_periphery[[i]][["LN"]][["cell-numbers-YFPpos"]][["time"]],"celltype" = tmp_periphery[[i]][["LN"]][["cell-numbers-YFPpos"]][["celltype"]], "cell_number_SP" = tmp_periphery[[i]][["SP"]][["cell-numbers-YFPpos"]][["cell_number"]])))
}
for(i in 1:nmice){
{names(tmp_periphery[[i]][["periphery"]]) = c("cell_numbers_all","cell_numbers_YFPpos");tmp_periphery[[i]][["periphery"]]}
}
adding_cell_numbers <- function(x){
k <- x$cell_number_LN+x$cell_number_SP
return(data.frame("cell_number_tot" = k, "time" = x$time, "celltype" = x$celltype))
}
added_numbers <- map(tmp_periphery, function(a) map(a$periphery, function(b) adding_cell_numbers(b)  ))
for(i in 1:nmice){
tmp_periphery[[i]][[4]] <- append(tmp_periphery[[i]][[4]], list(data.frame("perc_YFP_LN" = tmp_periphery[[i]][["LN"]][["perc YFP"]][["cell_number"]], "time" = tmp_periphery[[i]][["LN"]][["perc YFP"]][["time"]], "celltype" = tmp_periphery[[i]][["LN"]][["perc YFP"]][["celltype"]], "perc_YFP_SP" = tmp_periphery[[i]][["SP"]][["perc YFP"]][["cell_number"]])))
}
for(i in 1:nmice){
{names(tmp_periphery[[i]][["periphery"]]) = c("cell_numbers_all","cell_numbers_YFPpos", "frac_YFP");tmp_periphery[[i]][["periphery"]]}
}
normalizing_YFP_frac <- function(x){
k <- (x$cell_numbers_all$cell_number_SP*(x$frac_YFP$perc_YFP_SP*1/100) + x$cell_numbers_all$cell_number_LN*(x$frac_YFP$perc_YFP_LN*1/100))*1/(x$cell_numbers_all$cell_number_SP+x$cell_numbers_all$cell_number_LN)
return(data.frame("norm_frac_YFP" = k, "time" = x$cell_numbers_YFPpos$time, "celltype" = x$cell_numbers_YFPpos$celltype))
}
norm_frac <- map(tmp_periphery, ~normalizing_YFP_frac(.$periphery))
final_data_simple_model <- map2(added_numbers, norm_frac, ~ append(.x,list(.y)))
final_data_simple_model <- map(final_data_simple_model, ~{names(.) <- c("cell_numbers_all", "cell_numbers_YFPpos", "YFP_frac");.})
final_data_simple_model <- map_depth(final_data_simple_model, 2,~split_CD4CD8(.))
final_data_simple_model <- map_depth(final_data_simple_model, 2, ~{names(.) <- c(unique(.[[1]][["celltype"]]),unique(.[[2]][["celltype"]]) );.})
save(final_data_simple_model, file = "DataObjects/final_data_simple_model.RData")
#appending periphery option
for(i in 1:nmice){
tmp_periphery[[i]][[4]] <- append(tmp_periphery[[i]][[4]], list(data.frame("perc_Ki67_YFP_LN" = tmp_periphery[[i]][["LN"]][["perc Ki67 - YFPpos cells"]][["cell_number"]], "time" = tmp_periphery[[i]][["LN"]][["perc Ki67 - YFPpos cells"]][["time"]], "celltype" = tmp_periphery[[i]][["LN"]][["perc Ki67 - YFPpos cells"]][["celltype"]], "perc_Ki67_YFP_SP" = tmp_periphery[[i]][["SP"]][["perc Ki67 - YFPpos cells"]][["cell_number"]])))
}
for(i in 1:nmice){
{names(tmp_periphery[[i]][["periphery"]]) = c("cell_numbers_all","cell_numbers_YFPpos", "frac_YFP", "frac_Ki67_YFPpos");tmp_periphery[[i]][["periphery"]]}
}
adding_cell_numbers_Ki67 <- function(x){
k <- (x$cell_numbers_YFPpos$cell_number_SP*(x$frac_Ki67_YFPpos$perc_Ki67_YFP_SP*1/100) + x$cell_numbers_YFPpos$cell_number_LN*(x$frac_Ki67_YFPpos$perc_Ki67_YFP_LN*1/100))
m <- (x$cell_numbers_YFPpos$cell_number_SP*(1-x$frac_Ki67_YFPpos$perc_Ki67_YFP_SP*1/100) + x$cell_numbers_YFPpos$cell_number_LN*(1-x$frac_Ki67_YFPpos$perc_Ki67_YFP_LN*1/100))
return(list(data.frame("abs_Ki67hi_YFP" = k,"abs_Ki67lo_YFP" = m, "time" = x$cell_numbers_YFPpos$time, "celltype" = x$cell_numbers_YFPpos$celltype)))
}
added_numbers_Ki67<- map(tmp_periphery, ~adding_cell_numbers_Ki67(.$periphery))
added_numbers_Ki67 <- map(added_numbers_Ki67, ~{names(.) = c("cell_numbers_Ki67_YFP");. })
normalizing_Ki67_YFP_frac <- function(x){
k <- (x$cell_numbers_YFPpos$cell_number_SP*(x$frac_Ki67_YFPpos$perc_Ki67_YFP_SP*1/100) + x$cell_numbers_YFPpos$cell_number_LN*(x$frac_Ki67_YFPpos$perc_Ki67_YFP_LN*1/100))*1/(x$cell_numbers_YFPpos$cell_number_SP+x$cell_numbers_YFPpos$cell_number_LN)
return(data.frame("norm_frac_Ki67_YFP" = k, "time" = x$cell_numbers_YFPpos$time, "celltype" = x$cell_numbers_YFPpos$celltype))
}
norm_frac_Ki67_YFP <- map(tmp_periphery, ~normalizing_Ki67_YFP_frac(.$periphery))
final_data_flow_model <- map2(added_numbers_Ki67, norm_frac_Ki67_YFP, ~ append(.x,list(.y)))
final_data_flow_model <- map2(final_data_flow_model, added_numbers, ~ append(.x,.y))
final_data_flow_model <- map(final_data_flow_model, ~{names(.) <- c("cell_numbers_Ki67_YFPpos", "Ki67_YFP_frac", "cell_numbers_all", "cell_numbers_YFPpos");.})
final_data_flow_model <- map_depth(final_data_flow_model, 2,~split_CD4CD8(.))
final_data_flow_model <- map_depth(final_data_flow_model, 2, ~{names(.) <- c(unique(.[[1]][["celltype"]]),unique(.[[2]][["celltype"]]) );.})
save(final_data_flow_model, file = "DataObjects/final_data_flow_model.RData")
tmp_periphery_v2 <- tmp_periphery
#appending periphery option
for(i in 1:nmice){
tmp_periphery_v2[[i]][[4]] <- append(tmp_periphery_v2[[i]][[4]], list(data.frame("perc_Ki67_LN" = tmp_periphery[[i]][["LN"]][["perc Ki67 - all cells"]][["cell_number"]], "time" = tmp_periphery[[i]][["LN"]][["perc Ki67 - all cells"]][["time"]], "celltype" = tmp_periphery[[i]][["LN"]][["perc Ki67 - all cells"]][["celltype"]], "perc_Ki67_SP" = tmp_periphery[[i]][["SP"]][["perc Ki67 - all cells"]][["cell_number"]])))
}
for(i in 1:nmice){
{names(tmp_periphery_v2[[i]][["periphery"]]) = c("cell_numbers_all","cell_numbers_YFPpos", "frac_YFP", "frac_Ki67_YFPpos", "frac_Ki67");tmp_periphery_v2[[i]][["periphery"]]}
}
normalizing_Ki67_frac <- function(x){
k <- (x$cell_numbers_all$cell_number_SP*(x$frac_Ki67$perc_Ki67_SP*1/100) + x$cell_numbers_all$cell_number_LN*(x$frac_Ki67$perc_Ki67_LN*1/100))*1/(x$cell_numbers_all$cell_number_SP+x$cell_numbers_all$cell_number_LN)
return(data.frame("norm_frac_Ki67" = k, "time" = x$cell_numbers_all$time, "celltype" = x$cell_numbers_all$celltype))
}
norm_frac_Ki67 <- map(tmp_periphery_v2, ~normalizing_Ki67_frac(.$periphery))
final_data_flow_model_v2 <- map2(added_numbers_Ki67, norm_frac_Ki67_YFP, ~ append(.x,list(.y)))
final_data_flow_model_v2 <- map2(final_data_flow_model_v2, norm_frac_Ki67, ~ append(.x,list(.y)))
final_data_flow_model_v2 <- map2(final_data_flow_model_v2, added_numbers, ~ append(.x,.y))
final_data_flow_model_v2 <- map(final_data_flow_model_v2, ~{names(.) <- c("cell_numbers_Ki67_YFPpos", "Ki67_YFP_frac", "Ki67_frac", "cell_numbers_all", "cell_numbers_YFPpos");.})
final_data_flow_model_v2 <- map_depth(final_data_flow_model_v2, 2,~split_CD4CD8(.))
final_data_flow_model_v2 <- map_depth(final_data_flow_model_v2, 2, ~{names(.) <- c(unique(.[[1]][["celltype"]]),unique(.[[2]][["celltype"]]) );.})
save(final_data_flow_model_v2, file = "DataObjects/final_data_flow_model_v2.RData")
# clear up everything but products
rm(list=setdiff(ls(), c("CD4_CD8","demog", "final_data_simple_model","final_data_flow_model","final_data_flow_model_v2"))) #Final products
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
packages <- c("tidyverse", "ggplot2")
tmp=lapply(packages, require, character.only = TRUE)
nboots=100
source("grind.R")
#load("simple_model_together.RData")
load(file =  "../data/DataObjects/CD4_CD8.RData")
load(file = "../data/DataObjects/final_data_simple_model.RData")
YFP_matSP <- map(CD4_CD8, ~.[["cell-numbers-YFPpos"]][["TH"]]) %>%
map(~filter(., grepl("mat", celltype)))  %>%
map(~select(., c("time", "cell_number","ID"))) %>%
map(~arrange(., ID))
YFP_matSP_fitting <- map(YFP_matSP, ~  mutate(.,time = time - 4))
YFP_nai <- map(final_data_simple_model, ~.[["cell_numbers_YFPpos"]])
test <- map(YFP_nai, ~do.call(rbind,.))
test <- map2(test, names(test), ~ mutate(.x, ID = as.factor(.y)))
test <- do.call(rbind, test)
YFP_nai <- test %>% group_by(celltype) %>% group_split()
names(YFP_nai) <- c("CD4", "CD8")
YFP_nai_fitting <- map(YFP_nai, ~ mutate(., time = time - 4) %>%
mutate(., N = cell_number_tot)%>%
filter(., time < 80) %>%
select(., c("time", "ID", "N")))
YFP_nai <- map(YFP_nai, ~ mutate(., N = cell_number_tot)%>%
select(., c("time", "ID", "N")))
YFP <- map2(YFP_matSP, YFP_nai, ~ merge(.x,.y, by = c("time", "ID"), all = TRUE)) %>%
map(~mutate(., M = cell_number, .keep = "unused"))
YFP_fitting <- map2(YFP_matSP_fitting, YFP_nai_fitting, ~ merge(.x,.y, by = c("time", "ID"), all = TRUE))  %>%
map(~mutate(., M = cell_number, .keep = "unused"))
YFP_fitting <- map(YFP_fitting, ~select(., c("time", "M", "N"))) %>%
map(~filter(., !is.na(N) & !is.na(M))) %>%
map(~data.frame(.)) %>%
map(~filter(., time < 80))
fun_log <- function (x){
return(log(x))
}
simultaneous_model <- function(t, state, parms) {
with(as.list(c(state,parms)), {
# M = YFP+ mSPs, N = YFP+ naive T cells
# Y = Y0 + a*b^t * exp(-ct)
dM = a*exp(-c*t)*(t*b^(t-1) - c*(b^t))
#dY = (c*a*t^b- a*b*t^(b-1))/exp(c*t)
dN = Theta*M - mu*N
return(list(c(dM,dN)))
})
}
load(file = "parameters/p_YFP_mSP.RData")
simultaneous_fit <- map2(YFP_fitting, p_YFP_mSP,  ~fit(datas = .x,
parms = c(.y[c("a","b","c")], "Theta" = 0.4, "mu" = 0.03),
state = c("M" = 1000,"N" = 15000),
free = c("a", "b","c", "Theta","mu", "M", "N"),
odes = simultaneous_model,
method = "Pseudo",
bootstrap = nboots,
lower = c("a" = 500, "b" = 1.000001,"c" = 0.01, "Theta" = 0.01, "mu" = 0.001, "M" = 10, "N" = 1000), # b cannot be smaller 1
upper = c("a" = 20000, "b" = 2,"c" =0.6, "Theta" = 10, "mu" = 1, "M" = 1000000, "N" = 1000000),
fun = fun_log))
shapiro <- map(simultaneous_fit, ~shapiro.test(.[["residuals"]]))
simple_sim_abs <- simultaneous_fit
save(simple_sim_abs, file = "DataObjects/simple_sim_abs.Rdata")
simultaneous_abs_parms <- map(simultaneous_fit, ~.[["par"]])
simultaneous_table <- map(simultaneous_abs_parms,~run(tmax = 80,
parms = .,
state = .[c("M", "N")],
odes = simultaneous_model,
table = TRUE)
)
simultaneous_table <- map(simultaneous_table, ~mutate(.,time = time+4))
data_fit <- map2(simultaneous_table, YFP, ~merge(.x,.y, by = "time", all = TRUE)) %>%
map(~mutate(.,M_model = M.x, M_data = M.y, N_model = N.x, N_data = N.y, .keep = "unused"))%>%
map(~mutate(., M_residuals = log(M_model) - log(M_data), N_residuals = log(N_model) - log(N_data)))
data_fit_long <- rbind(cbind(data_fit[["CD4"]], "receptor" = rep("CD4", nrow(data_fit[["CD4"]]))),
cbind(data_fit[["CD8"]], "receptor" = rep("CD8", nrow(data_fit[["CD8"]]))))
simple_model_together_abs_table <- data_fit_long
write_rds(simple_model_together_abs_table, file = "../scripts_figures/simple_model_together_abs_table.Rds")
YFP_nai_frac <- map(final_data_simple_model, ~.[["YFP_frac"]])
test <- map(YFP_nai_frac, ~do.call(rbind,.))
test <- map2(test, names(test), ~ mutate(.x, ID = as.factor(.y)))
test <- do.call(rbind, test)
YFP_frac <- test %>% group_by(celltype) %>% group_split()
names(YFP_frac ) <- c("CD4", "CD8")
YFP_nai_frac <- map(YFP_frac, ~ mutate(., l = norm_frac_YFP)%>%
filter(., time < 80) %>%
select(., c("time", "l", "ID")))
YFP_nai_frac_fitting <-map(YFP_nai_frac, ~mutate(., time = time - 4) )
YFP_nai_frac <- map2(YFP_matSP, YFP_nai_frac, ~ merge(.x,.y, by = c("time", "ID"), all = TRUE)) %>%
map(~mutate(., M = cell_number, .keep = "unused"))
YFP_nai_frac_fitting <- map2(YFP_matSP_fitting, YFP_nai_frac_fitting, ~ merge(.x,.y, by = c("time", "ID"), all = TRUE)) %>%
map(~mutate(., M = cell_number, .keep = "unused")) %>%
map(~select(., c("time", "l", "M", "ID")))
nai <- map(final_data_simple_model, ~.[["cell_numbers_all"]])
test <- map(nai, ~do.call(rbind,.))
test <- map2(test, names(test), ~ mutate(.x, ID = as.factor(.y)))
test <- do.call(rbind, test)
nai<- test %>% group_by(celltype) %>% group_split()
names(nai) <- c("CD4", "CD8")
nai_fitting<- map(nai, ~ mutate(., time = time - 4) %>%
mutate(., N = cell_number_tot, .keep = "unused")%>%
filter(., time < 80) )
nai <- map(nai, ~ mutate(., N = cell_number_tot, .keep = "unused"))
YFP_Z <- map2(YFP_nai_frac, nai, ~ merge(.x,.y, all = TRUE)) %>%
map(~mutate(., Z = M/N))
YFP_Z_fitting <- map2(YFP_nai_frac_fitting, nai_fitting, ~ merge(.x,.y, all = TRUE))  %>%
map(~mutate(., Z = M/N)) %>%
map(~select(., c("time", "Z", "l"))) %>%
map(~filter(., time < 80)) %>%
map(~filter(., !is.na(l) & !is.na(Z)))
load(file = "parameters/p_Z_mSP.RData")
simultaneous_frac <- function(t, state, parms){
with(as.list(c(state, parms)),{
dZ = -((a + b)*exp(a*t + (t - tau)*v)*(1 + exp((t - tau)*v))^(-1 - (a + b)/v)*Z0) + a*exp(a *t)*(1 + exp((t - tau)*v))^(-((a + b)/v))*Z0
dl = Theta*Z  - mu*l
return(list(c(dZ, dl)))
})
}
fun_logit <- function (x){
x[x<0] <- 0
#print(x)
return(log(x/(1-x)))
}
fun_log <- function (x){
return(log(x))
}
# lower = list("CD4" = c("Z" = 0.0001,"a" = 0.01,"b" = 0.01, "v" = 0.1, "tau" = 1),
#              "CD8" = c("Z" = 0.0001,"a" = 0.01,"b" = 0.01, "v" = 0.1, "tau" = 1))
#
# upper = list("CD4" = c("Z" = 0.05,"a" = 1.3,"b" = 0.6, "v" = 1.0, "tau" = 5),
#              "CD8" = c("Z" = 0.05,"a" = 1.2,"b" = 0.6, "v" = 1.0, "tau" = 5))
# EVA
# p<- c(Z0 = 0.01 , a = 0.5, b = 0.1, tau = 5, v = 0.9 )
#
#
#
# Z_fit <- map2(Z_data_fitting, names(Z_data_fitting), ~fit(.x,
#                            odes = model,
#                            free= c("Z0","a","b", "v", "tau"),
#                            state = c("Z" = 0.03),
#                            fun = fun_logit,
#                            solution = TRUE,
#                            method ="Pseudo",
#                            parms = p,
#                            #bootstrap = 1000,
#                            lower = c("Z0" = 0.001,"a" = 0.01,"b" = 0.01, "v" = 0.1, "tau" = 1),
#                            upper = c("Z0" = 0.05,"a" = 1.65,"b" = 0.6, "v" = 1.0, "tau" = 5)
#                            )
# )
#
parguesses = c(Z0=0.001, a=1.4,b=0.05, v=0.4, tau=0.000002, Theta=0.1, mu=0.02)
simultaneous_fit_frac <- map2(YFP_Z_fitting, p_Z_mSP,  ~fit(datas = .x,
# parms = c(.y, "Theta" = 0.1,
#          "mu" = 0.02),
parms=parguesses,
state = c("Z" = 0.001,
"l" = 0.01),
free = c("a","b","Theta","mu", "v", "tau","Z0", "l"),
odes = simultaneous_frac,
method = "Pseudo",
lower =c("a" = 0.01,
"b" = 0.001,
"Theta" = 0.001,
"mu" = 0.005,
"v" = 0.01,
"tau" = 0.000001,
"Z0" = 0.0001,
"l" = 0.0001),
upper = c("a" = 50,
"b" = 10.0,
"Theta" = 2,
"mu" = 0.5,
"v" = 5,
"tau" = 0.000003,
"Z0" = 0.01,
"l" = 1),
fun = fun_logit,
bootstrap = nboots
))
load(file = "parameters/p_Z_mSP_EVA.Rdata")
simultaneous_frac <- function(t, state, parms){
with(as.list(c(state, parms)),{
dZ = -((a + b)*exp(a*t + (t - tau)*v)*(1 + exp((t - tau)*v))^(-1 - (a + b)/v)*Z0) + a*exp(a *t)*(1 + exp((t - tau)*v))^(-((a + b)/v))*Z0
dl = Theta*Z  - mu*l
return(list(c(dZ, dl)))
})
}
fun_logit <- function (x){
x[x<0] <- 0
#print(x)
return(log(x/(1-x)))
}
fun_log <- function (x){
return(log(x))
}
# lower = list("CD4" = c("Z" = 0.0001,"a" = 0.01,"b" = 0.01, "v" = 0.1, "tau" = 1),
#              "CD8" = c("Z" = 0.0001,"a" = 0.01,"b" = 0.01, "v" = 0.1, "tau" = 1))
#
# upper = list("CD4" = c("Z" = 0.05,"a" = 1.3,"b" = 0.6, "v" = 1.0, "tau" = 5),
#              "CD8" = c("Z" = 0.05,"a" = 1.2,"b" = 0.6, "v" = 1.0, "tau" = 5))
# EVA
# p<- c(Z0 = 0.01 , a = 0.5, b = 0.1, tau = 5, v = 0.9 )
#
#
#
# Z_fit <- map2(Z_data_fitting, names(Z_data_fitting), ~fit(.x,
#                            odes = model,
#                            free= c("Z0","a","b", "v", "tau"),
#                            state = c("Z" = 0.03),
#                            fun = fun_logit,
#                            solution = TRUE,
#                            method ="Pseudo",
#                            parms = p,
#                            #bootstrap = 1000,
#                            lower = c("Z0" = 0.001,"a" = 0.01,"b" = 0.01, "v" = 0.1, "tau" = 1),
#                            upper = c("Z0" = 0.05,"a" = 1.65,"b" = 0.6, "v" = 1.0, "tau" = 5)
#                            )
# )
#
parguesses = c(Z0=0.001, a=1.4,b=0.05, v=0.4, tau=0.000002, Theta=0.1, mu=0.02)
simultaneous_fit_frac <- map2(YFP_Z_fitting, p_Z_mSP,  ~fit(datas = .x,
# parms = c(.y, "Theta" = 0.1,
#          "mu" = 0.02),
parms=parguesses,
state = c("Z" = 0.001,
"l" = 0.01),
free = c("a","b","Theta","mu", "v", "tau","Z0", "l"),
odes = simultaneous_frac,
method = "Pseudo",
lower =c("a" = 0.01,
"b" = 0.001,
"Theta" = 0.001,
"mu" = 0.005,
"v" = 0.01,
"tau" = 0.000001,
"Z0" = 0.0001,
"l" = 0.0001),
upper = c("a" = 50,
"b" = 10.0,
"Theta" = 2,
"mu" = 0.5,
"v" = 5,
"tau" = 0.000003,
"Z0" = 0.01,
"l" = 1),
fun = fun_logit,
bootstrap = nboots
))
# lower = list("CD4" = c("Z" = 0.0001,"a" = 0.01,"b" = 0.01, "v" = 0.1, "tau" = 1),
#              "CD8" = c("Z" = 0.0001,"a" = 0.01,"b" = 0.01, "v" = 0.1, "tau" = 1))
#
# upper = list("CD4" = c("Z" = 0.05,"a" = 1.3,"b" = 0.6, "v" = 1.0, "tau" = 5),
#              "CD8" = c("Z" = 0.05,"a" = 1.2,"b" = 0.6, "v" = 1.0, "tau" = 5))
# EVA
# p<- c(Z0 = 0.01 , a = 0.5, b = 0.1, tau = 5, v = 0.9 )
#
#
#
# Z_fit <- map2(Z_data_fitting, names(Z_data_fitting), ~fit(.x,
#                            odes = model,
#                            free= c("Z0","a","b", "v", "tau"),
#                            state = c("Z" = 0.03),
#                            fun = fun_logit,
#                            solution = TRUE,
#                            method ="Pseudo",
#                            parms = p,
#                            #bootstrap = 1000,
#                            lower = c("Z0" = 0.001,"a" = 0.01,"b" = 0.01, "v" = 0.1, "tau" = 1),
#                            upper = c("Z0" = 0.05,"a" = 1.65,"b" = 0.6, "v" = 1.0, "tau" = 5)
#                            )
# )
#
parguesses = c(Z0=0.001, a=1.4,b=0.05, v=0.4, tau=0.000002, Theta=0.1, mu=0.02)
simultaneous_fit_frac <- map2(YFP_Z_fitting, p_Z_mSP,  ~fit(datas = .x,
# parms = c(.y, "Theta" = 0.1,
#          "mu" = 0.02),
parms=parguesses,
state = c("Z" = 0.001,
"l" = 0.01),
free = c("a","b","Theta","mu", "v", "tau","Z0", "l"),
odes = simultaneous_frac,
method = "Pseudo",
lower =c("a" = 0.01,
"b" = 0.001,
"Theta" = 0.001,
"mu" = 0.005,
"v" = 0.01,
"tau" = 0.000001,
"Z0" = 0.0001,
"l" = 0.0001),
upper = c("a" = 50,
"b" = 10.0,
"Theta" = 2,
"mu" = 0.5,
"v" = 5,
"tau" = 0.000003,
"Z0" = 0.01,
"l" = 1),
fun = fun_logit,
bootstrap = nboots
))
